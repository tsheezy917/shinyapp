kvp[[i]] <- c(labels[[i]] = values[[i]])
return(kvp)
}
}
str(my_list2)
typeof(my_list2)
my_list2
my_list2[[5]]
x <- c(cities[[1]] = regions[[1]]
x <- c(cities[[1]] = regions[[1]])
x <- c(paste(cities[[1]]) = regions[[1]])
cities[[1]]
x <- c(paste("cities[[1]]") = regions[[1]])
regions[[1]]
?dput
dput(cities[[1]])
x <- c(dput(cities[[1]]) = regions[[1]])
x <- c(dput(cities[[1]]) = dput(regions[[1]]))
x <- c(dput(cities[[1]], file = "") = dput(regions[[1]]))
adv_fin[, c("W", "TEAM")]
adv_fin[, c("TEAM", "W")]
View(player_stats2)
View(top3)
summarize(top3, n)
summarize(top3, n())
summarize(top3, players = n()) %>% arrange(desc(players))
top3 <- filter(PLAYER == -c("Marvin Williams", "Trevor Ariza", "Marcin Gortat"))
top3 <-top3 %>% filter(PLAYER == -c("Marvin Williams", "Trevor Ariza", "Marcin Gortat"))
top3 <- top3[top3$PLAYER == c("Marvin Williams" ,"Trevor Ariza", "Marcin Gortat"), ]
top3 <- player_stats2 %>% group_by(TEAM) %>% arrange(TEAM, desc(PIE), desc(NETRTG)) %>% top_n(3)
top3 <- top3[-top3$PLAYER == c("Marvin Williams" ,"Trevor Ariza", "Marcin Gortat"), ]
top3 <- top3[top3$PLAYER == -c("Marvin Williams" ,"Trevor Ariza", "Marcin Gortat"), ]
top3 <-top3 %>% filter(PLAYER == -"Marvin Williams")
str(top3)
filter(top3, PLAYER == -c(Trevor Ariza, Marcin Gortat, Marvin Williams))
filter(top3, PLAYER == c(Trevor Ariza, Marcin Gortat, Marvin Williams))
filter(top3, PLAYER == Trevor Ariza, Marcin Gortat, Marvin Williams)
filter(top3, PLAYER == Trevor Ariza)
filter(top3, PLAYER = Trevor Ariza)
filter(top3, PLAYER == Trevor Ariza)
filter(adv_fin, POT == 1)
top3
library(ggplot2)
library(readr)
library(dplyr)
library(readxl)
library(readr)
top3 <- top3 %>% top_n(3, wt = NETRTG) %>% group_by(TEAM) %>% select(PLAYER:TEAM, GP, W, OFFRTG:NETRTG, PIE)
mutate(top3, TA_net = NETRTG - net_mean, NAT = TA_net/NETRTG) %>% select(PLAYER:TEAM, NAT, TA_net, NETRTG:`Win%`) %>% arrange(desc(NAT))
top3
player_stats %>% group_by(TEAM) %>% summarize(net_mean = mean(NETRTG))
player_stats2 %>% group_by(TEAM) %>% summarize(net_mean = mean(NETRTG))
player_stats2
player_stats2 <- read_csv("~/Downloads/player advanced stats - Sheet4.csv")
player_stats2 <- read_csv("~/Downloads/player advanced stats - Sheet4.csv")
player_stats2 %>% group_by(TEAM) %>% summarize(net_mean = mean(NETRTG))
team_sum <- player_stats2 %>% group_by(TEAM) %>% summarize(net_mean = mean(NETRTG))
top3 <- left_join(team_sum, top3, by = "TEAM")
top3
top3 <- top3[,-2]
top3
top3 <- left_join(top3, team_sum, by = "TEAM")
top3
player_stats2 <- read_csv("~/Downloads/player advanced stats - Sheet4.csv") %>% filter(GP > 52 & MIN > 24) %>% select(-X1)
team_stats <- read_csv("~/Downloads/player advanced stats - Sheet5.csv")
team_stats <- team_stats[-1,-1]
team_cat <- names(team_stats)
team_cat <- paste("T", team_cat, sep = "_")
team_cat[[1]] <- "TEAM"
names(team_stats) <- team_cat
team_stats2 <- tbl_df(map(team_stats[,2:8], as.numeric))
team_stats1 <- select(team_stats, TEAM, T_PIE)
top3 <- cbind(team_stats1, team_stats2) %>% left_join(player_stats2, by = "TEAM") %>%
tbl_df %>% group_by(TEAM) %>% arrange(desc(NETRTG)) %>% select(TEAM, PLAYER, GP:W, OFFRTG:NETRTG, PIE, T_PIE:T_W, T_OFFRTG:T_NETRTG) %>%
top_n(3, wt = NETRTG) %>% top_n(3, wt = OFFRTG)
install.packages("purrr")
library(purrr)
team_stats2 <- tbl_df(map(team_stats[,2:8], as.numeric))
player_stats2 <- read_csv("~/Downloads/player advanced stats - Sheet4.csv") %>% filter(GP > 52 & MIN > 24) %>% select(-X1)
team_stats <- read_csv("~/Downloads/player advanced stats - Sheet5.csv")
team_stats <- team_stats[-1,-1]
team_stats <- read_csv("~/Downloads/player advanced stats - Sheet5.csv")
team_stats <- team_stats[-1,-1]
team_cat <- names(team_stats)
team_cat <- paste("T", team_cat, sep = "_")
team_cat[[1]] <- "TEAM"
names(team_stats) <- team_cat
team_stats2 <- tbl_df(map(team_stats[,2:8], as.numeric))
team_stats1 <- select(team_stats, TEAM, T_PIE)
top3 <- cbind(team_stats1, team_stats2) %>% left_join(player_stats2, by = "TEAM") %>%
tbl_df %>% group_by(TEAM) %>% arrange(desc(NETRTG)) %>% select(TEAM, PLAYER, GP:W, OFFRTG:NETRTG, PIE, T_PIE:T_W, T_OFFRTG:T_NETRTG) %>%
top_n(3, wt = NETRTG) %>% top_n(3, wt = OFFRTG)
top3 <- top3 %>% mutate(PIEp = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3))
top3
mutate(top3, TA_net = NETRTG - net_mean, NAT = TA_net/NETRTG) %>% select(PLAYER:TEAM, NAT, TA_net, NETRTG:`Win%`) %>% arrange(desc(NAT))
op3 <- top3 %>% mutate(PIEp = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3))
top3 %>% mutate(NET_ABV)
top3
View(top3)
filter(top3, NET_ABV > 1)
hi_netAbv <- filter(top3, NET_ABV > 1)
mean(hi_netAbv$T_W)
ggplot(top3, aes(NET_ABV, T_W, col = POT, size = NETRTG, alpha = .5)) + geom_point()
unique(top3$TEAM)
playoffs <- c("GSW", "UTA", "SAS", "LAC", "HOU", "POR", "OKC", "MEM", "BOS", "CLE", "TOR", "CHI", "IND", "ATL", "MIL", "WAS")
top3 <- top3 %>% mutate(PIEp = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(playoffs %in% TEAM, 1, 0))
top3 <- top3 %>% mutate(PIEp = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0))
top3
ggplot(top3, aes(NET_ABV, T_W, col = POT, size = NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(NET_ABV, log(T_W), col = POT, size = NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(log(NET_ABV^2), T_W, col = POT, size = NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(NET_ABV, T_W, col = POT, size = NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(NET_ABV, T_W, col = factor(POT), size = NETRTG, alpha = .5)) + geom_point()
12.1/.297
12.1*1.261
12.1*1.297
12.1/17.2
17.2/1.297
.297/12.1
(17.2-12.1)/17.2
67/82
hi_netAbv
cor(top3$NET_ABV, top3$T_NETRTG)
mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP) * NET_ABV) %>% arrange(desc(rank))
View(mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP) * NET_ABV) %>% arrange(desc(rank)))
player_rank <- glm(T_W ~ NETRTG + NET_ABV + PIEp + T_NETRTG, family = binomial, data = top3)
player_rank <- glm(POT ~ NETRTG + NET_ABV + PIEp + T_NETRTG, family = binomial, data = top3)
summary(player_rank)$coef
player_rank2 <- glm(POT ~ NETRTG + NET_ABV + T_NETRTG, family = binomial, data = top3)
summary(player_rank2)$coef
ggplot(top3, aes(NET_ABV, T_W/T_GP, col = factor(POT), size = NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(NET_ABV, T_W/T_GP, col = factor(POT), size = T_NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(T_PIE, T_W, col = factor(POT), size = T_NETRTG, alpha = .5)) + geom_point()
ggplot(top3, aes(PIE, NETRTG, col = factor(POT), size = T_NETRTG, alpha = .5)) + geom_point()
top3 %>% arrange(desc(PIEp))
top3 %>% group_by(POT) %>% summarize(N_ABV = mean(NET_ABV))
top3 %>% group_by(POT) %>% summarize(N_ABV = mean(NET_ABV), spread = sd(NET_ABV))
top3 %>% mutate(abv500 = ifelse(T_W > 41, 1, 0)) %>% group_by(abv500) %>% summarize(N_ABV = mean(NET_ABV), spread = sd(NET_ABV))
top3 %>% mutate(abv500 = ifelse(T_W > 50, 1, 0)) %>% group_by(abv500) %>% summarize(N_ABV = mean(NET_ABV), spread = sd(NET_ABV))
top3 %>% mutate(abv500 = ifelse(T_W > 54, 1, 0)) %>% group_by(abv500) %>% summarize(N_ABV = mean(NET_ABV), spread = sd(NET_ABV))
player_stats2
lm(NETRTG ~ `EFG%` + `REB%` + `AST%` + `USG%`)$coef
lm(NETRTG ~ `EFG%` + `REB%` + `AST%` + `USG%`, data = player_stats2)$coef
lm(NETRTG ~ `EFG%` + `REB%` + `AST%` + `USG%`, data = player_stats2)
lm(I(mean(NETRTG)) ~ `EFG%` + `REB%` + `AST%` + `USG%`, data = player_stats2)
hist(top3$NET_ABV)
top3
library(shiny); runApp('Coursera/project/template.R')
ui <- fluidPage(selectInput()
)
?selectInput
top3
67/82
mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP) * NET_ABV)
mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP) * NET_ABV)
mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP))
mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP)) %>% arrange(desc(rank))
top3 <- mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP)) %>% arrange(desc(rank))
top3
top3 <- mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP) * (NETRTG/T_NETRTG)) %>% arrange(desc(rank))
top3
top3 <- mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP) * (1 + log(NETRTG)/T_NETRTG)) %>% arrange(desc(rank))
top3
top3 <- mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP)) %>% arrange(desc(rank))
top3
View(top3)
runApp('Coursera/project/template.R')
top3 <- mutate(top3, rank = PIE * PIEp * ((T_W/T_GP)/.82) * (W/GP)) %>% arrange(PLAYER)
runApp('Coursera/project/template.R')
player_stats2
arrange(top3, desc(rank))
top3 <- rename(top3, PIE_index = rank)
top3
hist(top3$PIE_index)
hist(top3[top3$POT == 1, ]$PIE_index)
hist(top3[top3$POT == 0, ]$PIE_index)
scale(top3$PIE_index)
round(scale(top3$PIE_index), 3)
round(scale(top3$PIE_index, center = FALSe), 3)
round(scale(top3$PIE_index, center = FALSE), 3)
?factor
top3 %>% mutate(PIE_index = factor(PIE_index, ordered = TRUE))
top3 %>% mutate(PIE_index = factor(PIE_index, ordered = TRUE))
top3 %>% mutate(PIE_index = as.integer(factor(PIE_index, ordered = TRUE)))
View(top3 %>% mutate(PIE_index = as.integer(factor(PIE_index, ordered = TRUE))))
View(top3 %>% mutate(PIE_index = PIE_index/(max(PIE_index)))
)
View(top3 %>% mutate(PIE_index = PIE_index/4.5))
top3
arrange(top3, desc(PIE_index))
top3 %>% mutate(PIE_index = PIE_index/4.9)
top3 %>% mutate(PIE_index = PIE_index/4.9) %>% arrange(desc(PIE_index))
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
rank = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 3)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
rank = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 3) %>% select(-PIEp)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
rank = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 3) %>% select(TEAM:PIE_index)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
rank = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 3) %>% select(TEAM:POT, PIEr, PIE_index)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 3) %>% select(TEAM:POT, PIEr, PIE_index)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 5) %>% select(TEAM:POT, PIEr, PIE_index)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 5) %>% select(TEAM:POT, PIEr, PIE_index) %>% arrange(desc(PIE_index))
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9), 5)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round(PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP)/4.9), 3)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3))
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3)) %>% select(TEAM:PIE_index)
top3
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3)) %>% select(TEAM:PIE_index) %>% arrange(PLAYER)
top3
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
top3
top3
top3
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
mtcars2 <- mtcars
mtcars2$mpgsp <- ifelse(mtcars2$mpg - 20 > 0, mtcars2$mpg - 20, 0)
mtcars2
top3
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV))
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV))
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV + 1))
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV + 1)) %>% arrange(NET_ABVi)
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV + 1)) %>% arrange(desc(NET_ABVi))
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV + 1), NET_ABVe = log(NET_ABVi)) %>% arrange(desc(NET_ABVe))
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
library(shiny); runApp('Coursera/project/testapp.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/project/template.R')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
top3
top3
top3 %>% mutate(POT = factor(POT, label = c("Playoff Teams" = 1, "Non-Playoff Teams" = 0))))
top3 %>% mutate(POT = factor(POT, labels = c("Playoff Teams" = 1, "Non-Playoff Teams" = 0))))
top3 %>% mutate(POT = factor(POT, labels = c("Playoff Teams" = 1, "Non-Playoff Teams" = 0)))
?%>%
?pipe
top3 %>% mutate(NET_ABVi = ifelse(NET_ABV < 0, 1, NET_ABV + 1), NET_ABVe = log(NET_ABVi)) %>% arrange(desc(NET_ABVe))
install.packages("readr")
install.packages("dplyr")
install.packages("readxl")
install.packages("ggplot2")
install.packages("purrr")
library(ggplot2)
library(readr)
library(dplyr)
library(readxl)
library(purrr)
install.packages("ggplot2")
library(ggplot2)
library(readr)
library(dplyr)
library(readxl)
library(purrr)
top3 %>% mutate(POT = factor(POT, labels = c("Playoff Teams" = 1, "Non-Playoff Teams" = 0)))
top3 %>% mutate(POT = factor(POT, levels = c(0, 1), labels = c("Playoff teams", "Non-playoff teams")))
top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff teams", "Non-playoff teams")))
shiny::runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
top3 <- top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff teams", "Non-playoff teams")))
runApp('Coursera/tableexample')
top3 <- top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff", "Non-Playoff")))
runApp('Coursera/tableexample')
top3 <- top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff", "Non-Playoff")))
top3
playoffs <- c("GSW", "UTA", "SAS", "LAC", "HOU", "POR", "OKC", "MEM", "BOS", "CLE", "TOR", "CHI", "IND", "ATL", "MIL", "WAS")
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3)) %>% select(TEAM:PIE_index) %>% arrange(PLAYER)
top3
top3 <- top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff", "Non-Playoff")))
top3
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
shiny::runApp('Coursera/tableexample')
shiny::runApp('Coursera/tableexample')
top3
install.packages("readr")
install.packages("dplyr")
install.packages("readxl")
install.packages("ggplot2")
install.packages("purrr")
install.packages("ggplot2")
library(ggplot2)
library(readr)
library(dplyr)
library(readxl)
library(purrr)
player_stats2 <- read_csv("~/Downloads/player advanced stats - Sheet4.csv") %>% filter(GP > 52 & MIN > 24) %>% select(-X1)
team_stats <- read_csv("~/Downloads/player advanced stats - Sheet5.csv")
team_stats <- team_stats[-1,-1]
team_cat <- names(team_stats)
team_cat <- paste("T", team_cat, sep = "_")
team_cat[[1]] <- "TEAM"
names(team_stats) <- team_cat
team_stats2 <- tbl_df(map(team_stats[,2:8], as.numeric))
team_stats1 <- select(team_stats, TEAM, T_PIE)
top3 <- cbind(team_stats1, team_stats2) %>% left_join(player_stats2, by = "TEAM") %>%
tbl_df %>% group_by(TEAM) %>% arrange(desc(NETRTG)) %>% select(TEAM, PLAYER, GP:W, OFFRTG:NETRTG, PIE, T_PIE:T_W, T_OFFRTG:T_NETRTG) %>%
top_n(3, wt = NETRTG) %>% top_n(3, wt = OFFRTG)
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3)) %>% select(TEAM:PIE_index) %>% arrange(PLAYER)
playoffs <- c("GSW", "UTA", "SAS", "LAC", "HOU", "POR", "OKC", "MEM", "BOS", "CLE", "TOR", "CHI", "IND", "ATL", "MIL", "WAS")
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3)) %>% select(TEAM:PIE_index) %>% arrange(PLAYER)
top3 <- top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff", "Non-Playoff")))
top3
save(top3, file = top3.Rds)
save(top3, file = top3.csv)
?write_csv
write_csv(top3, "~/Coursera/top3")
shiny::runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
?column
runApp('Coursera/tableexample')
top3
?p
?a
source('~/Downloads/playerstats3.R')
install.packages("dplyr")
install.packages("readxl")
install.packages("ggplot2")
install.packages("purrr")
library(ggplot2)
library(readr)
library(dplyr)
library(readxl)
library(purrr)
player_stats2 <- read_csv("~/Downloads/player advanced stats - Sheet4.csv") %>% filter(GP > 52 & MIN > 24) %>% select(-X1)
team_stats <- read_csv("~/Downloads/player advanced stats - Sheet5.csv")
team_stats <- team_stats[-1,-1]
team_cat <- names(team_stats)
team_cat <- paste("T", team_cat, sep = "_")
team_cat[[1]] <- "TEAM"
names(team_stats) <- team_cat
team_stats2 <- tbl_df(map(team_stats[,2:8], as.numeric))
team_stats1 <- select(team_stats, TEAM, T_PIE)
top3 <- cbind(team_stats1, team_stats2) %>% left_join(player_stats2, by = "TEAM") %>%
tbl_df %>% group_by(TEAM) %>% arrange(desc(NETRTG)) %>% select(TEAM, PLAYER, GP:W, OFFRTG:NETRTG, PIE, T_PIE:T_W, T_OFFRTG:T_NETRTG) %>%
top_n(3, wt = NETRTG) %>% top_n(3, wt = OFFRTG)
playoffs <- c("GSW", "UTA", "SAS", "LAC", "HOU", "POR", "OKC", "MEM", "BOS", "CLE", "TOR", "CHI", "IND", "ATL", "MIL", "WAS")
top3 <- top3 %>% mutate(PIEr = round(PIE/T_PIE, 3),  NET_ABV = round((NETRTG - T_NETRTG)/NETRTG, 3), POT = ifelse(TEAM %in% playoffs, 1, 0),
PIE_index = round((PIE * PIEr * ((T_W/T_GP)/.82) * (W/GP))/4.9, 3)) %>% select(TEAM:PIE_index) %>% arrange(PLAYER)
top3 <- top3 %>% mutate(POT = factor(POT, levels = c(1, 0), labels = c("Playoff", "Non-Playoff")))
install.packages("dplyr")
shiny::runApp('Coursera/tableexample')
?br
runApp('Coursera/tableexample')
?tabPanel
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
?mainPanel
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
top3
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
top3
runApp('Coursera/tableexample')
top3 %>% arrange(desc(T_PIE))
install.packages("purrr")
library(purrr)
top3 %>% arrange(desc(T_PIE))
library(dplyr)
top3 %>% arrange(desc(T_PIE))
runApp('Coursera/tableexample')
runApp('Coursera/tableexample')
runApp('Coursera/app')
runApp('Coursera/tableexample')
install.packages("rsconnect")
install.packages("rsconnect")
essence, players are indexed against the player
with the highest PIE after all the team factors and PIEr are taken into account
rsconnect::setAccountInfo(name='toddshannon', token='127BAE299E90607ADFD79663DE89A1F4', secret='ryLV2022hBoVnXTylfLBQjXpska4Sj9zKL5Ehd6l')
library(rsconnect)
rsconnect::deployApp("~/Coursera/tableexample/data/"))
library(rsconnect)
rsconnect::deployApp("~/Coursera/tableexample/data/")
library(rsconnect)
rsconnect::deployApp("~/Coursera/App-1/")
getwe()
getwd()
setwd("~/Coursera/App-1/")
getwd()
library(rsconnect)
rsconnect::deployApp("~/Coursera/App-1/")
library(rsconnect)
rsconnect::deployApp("~/Coursera/App-1/")
library(rsconnect)
rsconnect::deployApp("~/Coursera/tableexample/")
deployApp()
getwd()
setwd()
setwd("~/Coursera/App-1/")
ls()
getwd()
top3 <- read.csv("top3")
top3 <- read.csv("top3")
shiny::runApp()
deployApp()
runApp()
deployApp()
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
dir()
getwd(..)
getwd(...)
setwd("..")
getwd()
ls()
setwd("..")
ls()
setwd("~/Coursera/slidifyfolder")
setwd("~/Coursera/slidifyfolder")
setwd("~/Coursera/slidifyfolder/")
author("first_shinyapp")
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
publish(user = "tsheezy917", repo = "shinyapp")
ls()
setwd("~/Coursera/slidifyfolder/first_shinyapp/")
ls()
setwd("~/Coursera/slidifyfolder/first_shinyapp/.git/")
ls()
publish(user = "tsheezy917", repo = "shinyapp")
?publish
slidify('index.Rmd')
set("..")
setwd("..")
ls()
getwd()
slidify('index.Rmd')
browseURL('index.html')
publish(user = "tsheezy917", repo = "shinyapp")
publish(user = "tsheezy917", repo = "pitch_deck")
publish(user = "tsheezy917", repo = "shinyapp")
getwd()
ls()
publish(user = "tsheezy917", repo = "shinyapp")
slidify('index.Rmd')
getwd()
setwd("~/shinyapp/")
slidify('index.Rmd')
browseURL('index.html')
publish(user = "tsheezy917", repo = "shinyapp")
runApp('App-1')
